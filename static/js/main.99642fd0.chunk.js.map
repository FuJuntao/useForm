{"version":3,"sources":["Form.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["mobileRegExp","delay","time","data","Promise","resolve","setTimeout","useStyles","makeStyles","background","height","width","display","justifyContent","alignItems","paper","minWidth","padding","form","gap","validatingWrap","& > span","marginRight","Validating","react_default","a","createElement","className","CircularProgress","size","Form","_ref","mobile","config","useMemo","initialValue","validator","_validator","Object","asyncToGenerator","regenerator_default","mark","_callee","value","wrap","_context","prev","next","abrupt","Math","random","test","stop","_x","apply","this","arguments","validateTriggers","password","_useForm","useForm","useFeildProps","getFeildValidateStatus","getFeildError","validateFeilds","getFeildsValue","_handleSubmit","_callee2","e","isFormValide","values","_context2","preventDefault","sent","console","log","concat","styles","Paper","TextField","assign","label","error","FormHelperTextProps","component","helperText","variant","fullWidth","Button","color","onClick","_x2","theme","createMuiTheme","palette","primary","blueGrey","App","ThemeProvider","CssBaseline","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99642fd0.chunk.js","sourcesContent":["import React, { MouseEvent, useMemo } from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  CircularProgress,\r\n  makeStyles,\r\n  Paper,\r\n} from '@material-ui/core';\r\nimport { useForm } from '@fujuntao/use-form';\r\n\r\nconst mobileRegExp = /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\d{8}$/;\r\n\r\n/**\r\n * 延迟返回结果以模拟网络请求\r\n * @param time 延迟时间\r\n * @param data 延迟返回的值\r\n */\r\nfunction delay(time: number, data?: string): Promise<string> {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(data);\r\n    }, time);\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  background: {\r\n    height: '100vh',\r\n    width: '100wh',\r\n    background: 'linear-gradient(to right, #232526, #414345)',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n\r\n  paper: {\r\n    minWidth: 500,\r\n    padding: 50,\r\n  },\r\n\r\n  form: {\r\n    display: 'grid',\r\n    gap: '30px',\r\n  },\r\n\r\n  validatingWrap: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    '& > span': {\r\n      marginRight: 4,\r\n    },\r\n  },\r\n});\r\n\r\nfunction Validating() {\r\n  const { validatingWrap } = useStyles();\r\n\r\n  return (\r\n    <div className={validatingWrap}>\r\n      <span>校验中</span>\r\n      <CircularProgress size={12} />\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface FormProps {\r\n  mobile: string;\r\n}\r\n\r\nfunction Form({ mobile }: FormProps) {\r\n  const config = useMemo(\r\n    () => ({\r\n      mobile: {\r\n        initialValue: mobile,\r\n        validator: async (value: string) => {\r\n          if (!value) {\r\n            return '请输入手机号';\r\n          }\r\n\r\n          await delay((Math.random() + 1) * 2000);\r\n          if (!mobileRegExp.test(value)) {\r\n            return '手机号格式不正确';\r\n          }\r\n        },\r\n        validateTriggers: ['onBlur', 'onChange'],\r\n      },\r\n\r\n      password: {\r\n        validator: (value: any) => {\r\n          if (!value) {\r\n            return '请输入密码';\r\n          }\r\n        },\r\n        validateTriggers: 'onChange',\r\n      },\r\n    }),\r\n    [mobile],\r\n  );\r\n\r\n  const {\r\n    useFeildProps,\r\n    getFeildValidateStatus,\r\n    getFeildError,\r\n    validateFeilds,\r\n    getFeildsValue,\r\n  } = useForm(config);\r\n\r\n  async function handleSubmit(e: MouseEvent<HTMLButtonElement>) {\r\n    e.preventDefault();\r\n\r\n    const isFormValide = await validateFeilds();\r\n    console.log(`表单校验是否通过：${isFormValide}`);\r\n\r\n    if (isFormValide) {\r\n      const values = getFeildsValue();\r\n      console.log('表单值：', values);\r\n    }\r\n  }\r\n\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <div className={styles.background}>\r\n      <Paper className={styles.paper}>\r\n        <form className={styles.form}>\r\n          <TextField\r\n            label=\"mobile\"\r\n            {...useFeildProps('mobile')}\r\n            error={!!getFeildError('mobile')}\r\n            FormHelperTextProps={{ component: 'div' }}\r\n            helperText={\r\n              getFeildValidateStatus('mobile') === 'validating' ? (\r\n                <Validating />\r\n              ) : (\r\n                getFeildError('mobile')\r\n              )\r\n            }\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n\r\n          <TextField\r\n            label=\"password\"\r\n            {...useFeildProps('password')}\r\n            error={!!getFeildError('password')}\r\n            helperText={getFeildError('password')}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size=\"large\"\r\n            onClick={handleSubmit}\r\n          >\r\n            submit\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport { createMuiTheme, CssBaseline } from '@material-ui/core';\nimport { blueGrey } from '@material-ui/core/colors';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport Form from './Form';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blueGrey,\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Form mobile=\"123456\" />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}