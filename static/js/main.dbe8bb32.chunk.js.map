{"version":3,"sources":["Form.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["mobileRegExp","delay","time","data","Promise","resolve","setTimeout","useStyles","makeStyles","background","height","width","display","justifyContent","alignItems","paper","minWidth","padding","form","gap","validatingWrap","marginRight","Validating","className","CircularProgress","size","Form","mobile","config","useMemo","initialValue","validator","value","a","Math","random","test","validateTriggers","password","useForm","useFieldProps","getFieldValidateStatus","getFieldError","validateFields","getFieldsValue","e","preventDefault","isFormValide","console","log","values","styles","Paper","TextField","label","error","FormHelperTextProps","component","helperText","variant","fullWidth","Button","color","onClick","theme","createMuiTheme","palette","primary","blueGrey","App","ThemeProvider","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAUMA,EAAe,wEAOrB,SAASC,EAAMC,EAAcC,GAC3B,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPD,MAIP,IAAMK,EAAYC,YAAW,CAC3BC,WAAY,CACVC,OAAQ,QACRC,MAAO,QACPF,WAAY,8CACZG,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAGdC,MAAO,CACLC,SAAU,IACVC,QAAS,IAGXC,KAAM,CACJN,QAAS,OACTO,IAAK,QAGPC,eAAgB,CACdR,QAAS,OACTE,WAAY,SACZ,WAAY,CACVO,YAAa,MAKnB,SAASC,IAAc,IACbF,EAAmBb,IAAnBa,eAER,OACE,yBAAKG,UAAWH,GACd,oDACA,kBAACI,EAAA,EAAD,CAAkBC,KAAM,MAwGfC,MA/Ff,YAAsC,IAAtBC,EAAqB,EAArBA,OACRC,EAASC,mBACb,iBAAO,CACLF,OAAQ,CACNG,aAAcH,EACdI,UAAU,WAAD,4BAAE,WAAOC,GAAP,SAAAC,EAAA,yDACJD,EADI,yCAEA,wCAFA,uBAKH/B,EAA4B,KAArBiC,KAAKC,SAAW,IALpB,UAMJnC,EAAaoC,KAAKJ,GANd,yCAOA,oDAPA,2CAAF,mDAAC,GAUVK,iBAAkB,CAAC,SAAU,aAG/BC,SAAU,CACRP,UAAW,SAACC,GACV,IAAKA,EACH,MAAO,kCAGXK,iBAAkB,eAGtB,CAACV,IA3BgC,EAoC/BY,YAAQX,GALVY,EA/BiC,EA+BjCA,cACAC,EAhCiC,EAgCjCA,uBACAC,EAjCiC,EAiCjCA,cACAC,EAlCiC,EAkCjCA,eACAC,EAnCiC,EAmCjCA,eAnCiC,4CAsCnC,WAA4BC,GAA5B,iBAAAZ,EAAA,6DACEY,EAAEC,iBADJ,SAG6BH,IAH7B,OAGQI,EAHR,OAIEC,QAAQC,IAAR,gEAAwBF,IAEpBA,IACIG,EAASN,IACfI,QAAQC,IAAI,2BAAQC,IARxB,4CAtCmC,sBAkDnC,IAAMC,EAAS5C,IAEf,OACE,yBAAKgB,UAAW4B,EAAO1C,YACrB,kBAAC2C,EAAA,EAAD,CAAO7B,UAAW4B,EAAOpC,OACvB,0BAAMQ,UAAW4B,EAAOjC,MACtB,kBAACmC,EAAA,EAAD,eACEC,MAAM,UACFd,EAAc,UAFpB,CAGEe,QAASb,EAAc,UACvBc,oBAAqB,CAAEC,UAAW,OAClCC,WACuC,eAArCjB,EAAuB,UACrB,kBAACnB,EAAD,MAEAoB,EAAc,UAGlBiB,QAAQ,WACRC,WAAS,KAGX,kBAACP,EAAA,EAAD,eACEC,MAAM,YACFd,EAAc,YAFpB,CAGEe,QAASb,EAAc,YACvBgB,WAAYhB,EAAc,YAC1BiB,QAAQ,WACRC,WAAS,KAGX,kBAACC,EAAA,EAAD,CACEF,QAAQ,YACRG,MAAM,UACNrC,KAAK,QACLsC,QArFyB,6CAiF3B,cC/IJC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAASC,OAaEC,EATO,WACpB,OACE,kBAACC,EAAA,EAAD,CAAeN,MAAOA,GACpB,kBAACO,EAAA,EAAD,MACA,kBAAC,EAAD,CAAM5C,OAAO,aCLC6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dbe8bb32.chunk.js","sourcesContent":["import React, { MouseEvent, useMemo } from 'react';\nimport {\n  TextField,\n  Button,\n  CircularProgress,\n  makeStyles,\n  Paper,\n} from '@material-ui/core';\nimport { useForm } from '@fujuntao/use-form';\n\nconst mobileRegExp = /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\d{8}$/;\n\n/**\n * 延迟返回结果以模拟网络请求\n * @param time 延迟时间\n * @param data 延迟返回的值\n */\nfunction delay(time: number, data?: string): Promise<string> {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(data);\n    }, time);\n  });\n}\n\nconst useStyles = makeStyles({\n  background: {\n    height: '100vh',\n    width: '100wh',\n    background: 'linear-gradient(to right, #232526, #414345)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  paper: {\n    minWidth: 500,\n    padding: 50,\n  },\n\n  form: {\n    display: 'grid',\n    gap: '30px',\n  },\n\n  validatingWrap: {\n    display: 'flex',\n    alignItems: 'center',\n    '& > span': {\n      marginRight: 4,\n    },\n  },\n});\n\nfunction Validating() {\n  const { validatingWrap } = useStyles();\n\n  return (\n    <div className={validatingWrap}>\n      <span>校验中</span>\n      <CircularProgress size={12} />\n    </div>\n  );\n}\n\ninterface FormProps {\n  mobile: string;\n}\n\nfunction Form({ mobile }: FormProps) {\n  const config = useMemo(\n    () => ({\n      mobile: {\n        initialValue: mobile,\n        validator: async (value: string) => {\n          if (!value) {\n            return '请输入手机号';\n          }\n\n          await delay((Math.random() + 1) * 2000);\n          if (!mobileRegExp.test(value)) {\n            return '手机号格式不正确';\n          }\n        },\n        validateTriggers: ['onBlur', 'onChange'],\n      },\n\n      password: {\n        validator: (value: any) => {\n          if (!value) {\n            return '请输入密码';\n          }\n        },\n        validateTriggers: 'onChange',\n      },\n    }),\n    [mobile],\n  );\n\n  const {\n    useFieldProps,\n    getFieldValidateStatus,\n    getFieldError,\n    validateFields,\n    getFieldsValue,\n  } = useForm(config);\n\n  async function handleSubmit(e: MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n\n    const isFormValide = await validateFields();\n    console.log(`表单校验是否通过：${isFormValide}`);\n\n    if (isFormValide) {\n      const values = getFieldsValue();\n      console.log('表单值：', values);\n    }\n  }\n\n  const styles = useStyles();\n\n  return (\n    <div className={styles.background}>\n      <Paper className={styles.paper}>\n        <form className={styles.form}>\n          <TextField\n            label=\"mobile\"\n            {...useFieldProps('mobile')}\n            error={!!getFieldError('mobile')}\n            FormHelperTextProps={{ component: 'div' }}\n            helperText={\n              getFieldValidateStatus('mobile') === 'validating' ? (\n                <Validating />\n              ) : (\n                getFieldError('mobile')\n              )\n            }\n            variant=\"outlined\"\n            fullWidth\n          />\n\n          <TextField\n            label=\"password\"\n            {...useFieldProps('password')}\n            error={!!getFieldError('password')}\n            helperText={getFieldError('password')}\n            variant=\"outlined\"\n            fullWidth\n          />\n\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={handleSubmit}\n          >\n            submit\n          </Button>\n        </form>\n      </Paper>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport { createMuiTheme, CssBaseline } from '@material-ui/core';\nimport { blueGrey } from '@material-ui/core/colors';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport Form from './Form';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blueGrey,\n  },\n});\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Form mobile=\"123456\" />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}