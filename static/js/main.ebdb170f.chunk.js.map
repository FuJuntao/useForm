{"version":3,"sources":["useForm/actionTypes.ts","useForm/useFormState.tsx","useForm/useForm.tsx","useForm/index.tsx","Form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SET_VALUE","SET_ERROR","SET_VALIDATE_STATUS","reducer","state","action","type","actionTypes","id","value","Object","objectSpread","defineProperty","error","validateStatus","defaultGetValueFromEvent","e","target","checked","useFormState","options","arguments","length","undefined","initialState","useMemo","entries","forEach","_ref","_ref2","slicedToArray","key","_ref2$1$initialValue","initialValue","createInitialState","strictOptions","_ref3","_ref4","_ref4$","_ref4$$validator","validator","_ref4$$validateTrigge","validateTriggers","_ref4$$getValueFromEv","getValueFromEvent","_ref4$$collectValueTr","collectValueTrigger","createStrictOptions","_useReducer","useReducer","_useReducer2","formState","dispatch","useForm","_useFormState","_allIds","keys","_toList","useCallback","ids","setFeildValue","setFeildError","setFeildValidateStatus","status","_subscribeToValidate","eventSubject","pipe","switchMap","from","Promise","resolve","subscribe","validateResult","_createHandlers","_strictOptions$id","handlers","item","validateTriggerSubject","Subject","next","collectValueTriggerSubject","includes","unsubscribe","getFeildValue","getFeildsValue","idList","values","getFeildError","getFeildsError","errors","noErrors","useFeildProps","getFeildValidateStatus","_validateFeild","_validateFeild2","asyncToGenerator","regenerator_default","a","mark","_callee","_formState$id","_error","wrap","_context","prev","abrupt","sent","stop","_x","apply","this","validateFeilds","_validateFeilds","_callee2","resultList","_context2","all","map","some","passed","_x2","_useForm__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","mobileRegExp","delay","time","data","setTimeout","useStyles","makeStyles","background","height","width","display","justifyContent","alignItems","paper","minWidth","padding","form","gap","validatingWrap","& > span","marginRight","Validating","react_default","createElement","className","CircularProgress","size","Form","mobile","_validator","Math","random","test","password","_useForm","_handleSubmit","isFormValide","preventDefault","console","log","concat","styles","Paper","TextField","assign","label","FormHelperTextProps","component","helperText","variant","fullWidth","Button","color","onClick","theme","createMuiTheme","App","ThemeProvider","CssBaseline","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAGaA,EAAY,YAIZC,EAAY,YAIZC,EAAsB,sBCNnC,SAASC,EAAQC,EAAkBC,GACjC,OAAQA,EAAOC,MACb,KAAKC,EAAuB,IAClBC,EAAcH,EAAdG,GAAIC,EAAUJ,EAAVI,MACZ,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADLM,OAAAE,EAAA,EAAAF,CAAA,GAEGF,EAFHE,OAAAC,EAAA,EAAAD,CAAA,GAGON,EAAMI,GAHb,CAIIC,YAKN,KAAKF,EAAuB,IAClBC,EAAcH,EAAdG,GAAIK,EAAUR,EAAVQ,MACZ,OAAOH,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADLM,OAAAE,EAAA,EAAAF,CAAA,GAEGF,EAFHE,OAAAC,EAAA,EAAAD,CAAA,GAGON,EAAMI,GAHb,CAIIK,YAKN,KAAKN,EAAiC,IAC5BC,EAAuBH,EAAvBG,GAAIM,EAAmBT,EAAnBS,eACZ,OAAOJ,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADLM,OAAAE,EAAA,EAAAF,CAAA,GAEGF,EAFHE,OAAAC,EAAA,EAAAD,CAAA,GAGON,EAAMI,GAHb,CAIIM,qBAKN,QACE,OAAOV,GASb,SAASW,EAAyBC,GAChC,IAAKA,IAAMA,EAAEC,OACX,OAAOD,EAFyD,IAI1DC,EAAWD,EAAXC,OACR,MAAuB,aAAhBA,EAAOX,KAAsBW,EAAOC,QAAUD,EAAOR,MAgE/CU,MAbf,WAA6C,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACjCG,EAAeC,kBAAQ,kBA7C/B,SAA4BL,GAC1B,IAAMI,EAA0B,GAShC,OAPAd,OAAOgB,QAAQN,GAASO,QAAQ,SAAAC,GAAuC,IAAAC,EAAAnB,OAAAoB,EAAA,EAAApB,CAAAkB,EAAA,GAA7BG,EAA6BF,EAAA,GAAAG,EAAAH,EAAA,GAAtBI,oBAAsB,IAAAD,EAAP,GAAOA,EACrER,EAAaO,GAAO,CAClBtB,MAAOwB,EACPpB,MAAO,GACPC,eAAgB,UAGbU,EAmC4BU,CAAmBd,IAAU,CAACA,IAC3De,EAAgBV,kBAAQ,kBA5BhC,SAA6BL,GAC3B,IAAMe,EAA+B,GAsBrC,OApBAzB,OAAOgB,QAAQN,GAASO,QAAQ,SAAAS,GAQ7B,IAAAC,EAAA3B,OAAAoB,EAAA,EAAApB,CAAA0B,EAAA,GAPDL,EAOCM,EAAA,GAAAC,EAAAD,EAAA,GAAAE,EAAAD,EALCE,iBAKD,IAAAD,EALa,aAKbA,EAAAE,EAAAH,EAJCI,wBAID,IAAAD,EAJoB,CAAC,YAIrBA,EAAAE,EAAAL,EAHCM,yBAGD,IAAAD,EAHqB5B,EAGrB4B,EAAAE,EAAAP,EAFCQ,2BAED,IAAAD,EAFuB,WAEvBA,EACDV,EAAcJ,GAAO,CACnBa,oBACAE,sBACAN,YAEAE,iBAC8B,kBAArBA,EACH,CAACA,GACDA,KAGHP,EAK6BY,CAAoB3B,IAAU,CAACA,IAFxB4B,EAIjBC,qBAAW9C,EAASqB,GAJH0B,EAAAxC,OAAAoB,EAAA,EAAApB,CAAAsC,EAAA,GAM3C,MAAO,CACLG,UAPyCD,EAAA,GAQzCf,gBACAiB,SATyCF,EAAA,KCsO9BG,IAzUf,WAAwC,IAAvBjC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAAIiC,EACSnC,EAAaC,GAApD+B,EAD8BG,EAC9BH,UAAWhB,EADmBmB,EACnBnB,cAAeiB,EADIE,EACJF,SAK5BG,EAAoB9B,kBAAQ,kBAAMf,OAAO8C,KAAKpC,IAAU,CAACA,IAMzDqC,EAAUC,sBACd,SAAgBC,GAEd,MAAmB,kBAARA,EACF,CAACA,GAGS,qBAARA,EACFJ,EAEFI,GAET,CAACJ,IAQGK,EAAgBF,sBACpB,SAAuBlD,EAAYC,GACjC2C,EAAS,CAAE9C,KAAM,YAAaE,KAAIC,WAEpC,CAAC2C,IAQGS,EAAgBH,sBACpB,SAAuBlD,EAAYK,GACjCuC,EAAS,CAAE9C,KAAM,YAAaE,KAAIK,MAAOA,GAAgB,MAE3D,CAACuC,IAQGU,EAAyBJ,sBAC7B,SAAgClD,EAAYuD,GAC1CX,EAAS,CACP9C,KAAM,sBACNE,KACAM,eAAgBiD,KAGpB,CAACX,IAQGY,EAAuBN,sBAC3B,SAA6BlD,EAAYyD,GACvCA,EACGC,KACCC,YAAU,SAAA1D,GAAS,IACT+B,EAAcL,EAAc3B,GAA5BgC,UAMR,OAJAsB,EAAuBtD,EAAI,cAE3BqD,EAAcrD,EAAI,IAEX4D,YAAKC,QAAQC,QAAQ9B,EAAU/B,QAGzC8D,UAAU,SAAAC,GAETX,EAAcrD,EAAIgE,GAAkC,IAEpDV,EAAuBtD,EAAIgE,EAAiB,QAAU,cAG5D,CAACX,EAAeC,EAAwB3B,IAOpCsC,EAAkBf,sBACtB,SAAwBlD,GAAsB,IAAAkE,EAKxCvC,EAAc3B,GAHhBsC,EAF0C4B,EAE1C5B,oBACAF,EAH0C8B,EAG1C9B,kBACAF,EAJ0CgC,EAI1ChC,iBAEIiC,EAAqB,GAG3BjC,EAAiBf,QAAQ,SAAAiD,GACvB,GAAIA,GAAQA,IAAS9B,EAAqB,CACxC,IAAM+B,EAAyB,IAAIC,IACnCH,EAASC,GAAQ,SAAA5D,GACf,IAAMP,EAAQmC,EAAkB5B,GAChC6D,EAAuBE,KAAKtE,IAG9BuD,EAAqBxD,EAAIqE,MAI7B,IAAMG,EAA6B,IAAIF,IAqBvC,OApBIpC,EAAiBuC,SAASnC,IAG5B6B,EAAS7B,GAAuB,SAAA9B,GAC9B,IAAMP,EAAQmC,EAAkB5B,GAChC4C,EAAcpD,EAAIC,GAClBuE,EAA2BD,KAAKtE,IAGlCuD,EAAqBxD,EAAIwE,KAGzBA,EAA2BE,cAE3BP,EAAS7B,GAAuB,SAAA9B,GAC9B,IAAMP,EAAQmC,EAAkB5B,GAChC4C,EAAcpD,EAAIC,KAIfkE,GAET,CAACf,EAAezB,EAAe6B,IAO3BmB,EAAgBzB,sBACpB,SAAuBlD,GAErB,OADkB2C,EAAU3C,GAApBC,OAGV,CAAC0C,IAgBGiC,EAAiB1B,sBACrB,SAAwBC,GACtB,IAAM0B,EAAS5B,EAAQE,GACjB2B,EAAgC,GAMtC,OAJAD,EAAO1D,QAAQ,SAAAnB,GACb8E,EAAO9E,GAAM2E,EAAc3E,KAGtB8E,GAET,CAACH,EAAe1B,IASZ8B,EAAgB7B,sBACpB,SAAuBlD,GAErB,OADkB2C,EAAU3C,GAApBK,OAGV,CAACsC,IAoBGqC,EAAiB9B,sBACrB,SAAwBC,GACtB,IAAM0B,EAAS5B,EAAQE,GAEjB8B,EAA8C,GAChDC,GAAW,EAUf,OARAL,EAAO1D,QAAQ,SAAAnB,GACb,IAAMK,EAAQ0E,EAAc/E,GACxBK,IACF6E,GAAW,GAEbD,EAAOjF,GAAM,CAAEK,WAGV6E,EAAW,KAAOD,GAE3B,CAACF,EAAe9B,IASZkC,EAAgBjC,sBACpB,SACElD,GAEA,IAAMmE,EAAWlD,kBAAQ,kBAAMgD,EAAgBjE,IAAK,CAACA,IAErD,OAAOE,OAAAC,EAAA,EAAAD,CAAA,CAAED,MAAO0E,EAAc3E,IAAQmE,IAExC,CAACF,EAAiBU,IAOdS,EAAyBlC,sBAC7B,SAAgClD,GAE9B,OAD2B2C,EAAU3C,GAA7BM,gBAGV,CAACqC,IAQG0C,EAAiBnC,sBAAW,eAAAoC,EAAApF,OAAAqF,EAAA,EAAArF,CAAAsF,EAAAC,EAAAC,KAChC,SAAAC,EAA6B3F,GAA7B,IAAA4F,EAAA3F,EAAAI,EAAAC,EAAA0B,EAAA6D,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAxB,MAAA,UAAAqB,EAC2CjD,EAAU3C,GAA3CC,EADV2F,EACU3F,MAAOI,EADjBuF,EACiBvF,MAAOC,EADxBsF,EACwBtF,eACd0B,EAAcL,EAAc3B,GAA5BgC,UAEe,SAAnB1B,IAA6BD,EAJnC,CAAA0F,EAAAxB,KAAA,eAAAwB,EAAAE,OAAA,UAKW,GALX,cAQI3C,EAAuBtD,EAAI,cAE3BqD,EAAcrD,EAAI,IAVtB+F,EAAAxB,KAAA,GAYwBvC,EAAU/B,GAZlC,eAYUI,EAZV0F,EAAAG,KAeI7C,EAAcrD,EAAIK,GAElBiD,EAAuBtD,EAAIK,EAAQ,QAAU,WAjBjD0F,EAAAE,OAAA,UAmBW5F,GAnBX,yBAAA0F,EAAAI,SAAAR,MADgC,gBAAAS,GAAA,OAAAd,EAAAe,MAAAC,KAAAzF,YAAA,GAuBhC,CAAC8B,EAAWhB,EAAe2B,EAAwBD,IAU/CkD,EAAiBrD,sBAAW,eAAAsD,EAAAtG,OAAAqF,EAAA,EAAArF,CAAAsF,EAAAC,EAAAC,KAChC,SAAAe,EAA8BtD,GAA9B,IAAA0B,EAAA6B,EAAA,OAAAlB,EAAAC,EAAAK,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAApC,MAAA,cACQM,EAAS5B,EAAQE,GADzBwD,EAAApC,KAAA,EAE2BV,QAAQ+C,IAC/B/B,EAAOgC,IAAI,SAAA7G,GAAE,OAAIqF,EAAerF,MAHpC,cAEQ0G,EAFRC,EAAAT,KAAAS,EAAAV,OAAA,UAKSS,EAAWI,KAAK,SAAAC,GAAM,OAAKA,KALpC,wBAAAJ,EAAAR,SAAAM,MADgC,gBAAAO,GAAA,OAAAR,EAAAH,MAAAC,KAAAzF,YAAA,GAQhC,CAACoC,EAASoC,IAGZ,MAAO,CACLjC,gBACAC,gBACA8B,gBACAR,gBACAC,iBACAG,gBACAC,iBACAI,yBACAmB,oDC5UJ,IAAAU,EAAAC,EAAA,IAAAA,EAAAC,EAAAC,EAAA,4BAAAH,EAAA,IAAAC,EAAA,iMCUMG,EAAe,wEAOrB,SAASC,EAAMC,EAAcC,GAC3B,OAAO,IAAI3D,QAAQ,SAAAC,GACjB2D,WAAW,WACT3D,EAAQ0D,IACPD,KAIP,IAAMG,EAAYC,YAAW,CAC3BC,WAAY,CACVC,OAAQ,QACRC,MAAO,QACPF,WAAY,8CACZG,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAGdC,MAAO,CACLC,SAAU,IACVC,QAAS,IAGXC,KAAM,CACJN,QAAS,OACTO,IAAK,QAGPC,eAAgB,CACdR,QAAS,OACTE,WAAY,SACZO,WAAY,CACVC,YAAa,MAKnB,SAASC,IAAa,IACZH,EAAmBb,IAAnBa,eAER,OACEI,EAAAlD,EAAAmD,cAAA,OAAKC,UAAWN,GACdI,EAAAlD,EAAAmD,cAAA,kCACAD,EAAAlD,EAAAmD,cAACE,EAAA,EAAD,CAAkBC,KAAM,MAmGfC,MA1Ff,SAAA5H,GAAqC,IAArB6H,EAAqB7H,EAArB6H,OACRrI,EAAUK,kBACd,iBAAO,CACLgI,OAAQ,CACNxH,aAAcwH,EACdjH,UAAS,eAAAkH,EAAAhJ,OAAAqF,EAAA,EAAArF,CAAAsF,EAAAC,EAAAC,KAAE,SAAAC,EAAO1F,GAAP,OAAAuF,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAxB,MAAA,UACJtE,EADI,CAAA8F,EAAAxB,KAAA,eAAAwB,EAAAE,OAAA,SAEA,wCAFA,cAAAF,EAAAxB,KAAA,EAKH+C,EAA4B,KAArB6B,KAAKC,SAAW,IALpB,UAMJ/B,EAAagC,KAAKpJ,GANd,CAAA8F,EAAAxB,KAAA,eAAAwB,EAAAE,OAAA,SAOA,oDAPA,wBAAAF,EAAAI,SAAAR,MAAF,gBAAAS,GAAA,OAAA8C,EAAA7C,MAAAC,KAAAzF,YAAA,GAUTqB,iBAAkB,CAAC,SAAU,aAG/BoH,SAAU,CACRtH,UAAW,SAAA/B,GACT,IAAKA,EACH,MAAO,kCAGXiC,iBAAkB,cAGtB,CAAC+G,IA3BgCM,EAoC/B1G,kBAAQjC,GALVuE,EA/BiCoE,EA+BjCpE,cACAC,EAhCiCmE,EAgCjCnE,uBACAL,EAjCiCwE,EAiCjCxE,cACAwB,EAlCiCgD,EAkCjChD,eACA3B,EAnCiC2E,EAmCjC3E,eAnCiC,SAAA4E,IAAA,OAAAA,EAAAtJ,OAAAqF,EAAA,EAAArF,CAAAsF,EAAAC,EAAAC,KAsCnC,SAAAe,EAA4BjG,GAA5B,IAAAiJ,EAAA3E,EAAA,OAAAU,EAAAC,EAAAK,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAApC,MAAA,cACE/D,EAAEkJ,iBADJ/C,EAAApC,KAAA,EAG6BgC,IAH7B,OAGQkD,EAHR9C,EAAAT,KAIEyD,QAAQC,IAAR,yDAAAC,OAAwBJ,IAEpBA,IACI3E,EAASF,IACf+E,QAAQC,IAAI,2BAAQ9E,IARxB,wBAAA6B,EAAAR,SAAAM,OAtCmCJ,MAAAC,KAAAzF,WAkDnC,IAAMiJ,EAASpC,IAEf,OACEiB,EAAAlD,EAAAmD,cAAA,OAAKC,UAAWiB,EAAOlC,YACrBe,EAAAlD,EAAAmD,cAACmB,EAAA,EAAD,CAAOlB,UAAWiB,EAAO5B,OACvBS,EAAAlD,EAAAmD,cAAA,QAAMC,UAAWiB,EAAOzB,MACtBM,EAAAlD,EAAAmD,cAACoB,EAAA,EAAD9J,OAAA+J,OAAA,CACEC,MAAM,UACF/E,EAAc,UAFpB,CAGE9E,QAAS0E,EAAc,UACvBoF,oBAAqB,CAAEC,UAAW,OAClCC,WACuC,eAArCjF,EAAuB,UACrBuD,EAAAlD,EAAAmD,cAACF,EAAD,MAEA3D,EAAc,UAGlBuF,QAAQ,WACRC,WAAS,KAGX5B,EAAAlD,EAAAmD,cAACoB,EAAA,EAAD9J,OAAA+J,OAAA,CACEC,MAAM,YACF/E,EAAc,YAFpB,CAGE9E,QAAS0E,EAAc,YACvBsF,WAAYtF,EAAc,YAC1BuF,QAAQ,WACRC,WAAS,KAGX5B,EAAAlD,EAAAmD,cAAC4B,EAAA,EAAD,CAAQF,QAAQ,YAAYG,MAAM,UAAUC,QAjFjB,SAAA1D,GAAA,OAAAwC,EAAAnD,MAAAC,KAAAzF,aAiF3B,wCCjJJ8J,EAAQC,YAAe,IAWdC,EATO,WACpB,OACElC,EAAAlD,EAAAmD,cAACkC,EAAA,EAAD,CAAeH,MAAOA,GACpBhC,EAAAlD,EAAAmD,cAACmC,EAAA,EAAD,MACApC,EAAAlD,EAAAmD,cAACoC,EAAD,CAAM/B,OAAO,aCCCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5C,EAAAlD,EAAAmD,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ebdb170f.chunk.js","sourcesContent":["/**\r\n * 设置表单域的值\r\n */\r\nexport const SET_VALUE = 'SET_VALUE';\r\n/**\r\n * 设置表单域的错误提示信息\r\n */\r\nexport const SET_ERROR = 'SET_ERROR';\r\n/**\r\n * 设置表单域值的验证状态\r\n */\r\nexport const SET_VALIDATE_STATUS = 'SET_VALIDATE_STATUS';\r\n","import { useReducer, ChangeEvent, useMemo } from 'react';\r\nimport { Options, FormState, StrictOptions } from './types';\r\nimport * as actionTypes from './actionTypes';\r\nimport { Actions } from './actions';\r\n\r\nfunction reducer(state: FormState, action: Actions): FormState {\r\n  switch (action.type) {\r\n    case actionTypes.SET_VALUE: {\r\n      const { id, value } = action;\r\n      return {\r\n        ...state,\r\n        [id]: {\r\n          ...state[id],\r\n          value,\r\n        },\r\n      };\r\n    }\r\n\r\n    case actionTypes.SET_ERROR: {\r\n      const { id, error } = action;\r\n      return {\r\n        ...state,\r\n        [id]: {\r\n          ...state[id],\r\n          error,\r\n        },\r\n      };\r\n    }\r\n\r\n    case actionTypes.SET_VALIDATE_STATUS: {\r\n      const { id, validateStatus } = action;\r\n      return {\r\n        ...state,\r\n        [id]: {\r\n          ...state[id],\r\n          validateStatus,\r\n        },\r\n      };\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 如何从 event 中取值\r\n * @param e\r\n */\r\nfunction defaultGetValueFromEvent(e: ChangeEvent<HTMLInputElement>) {\r\n  if (!e || !e.target) {\r\n    return e;\r\n  }\r\n  const { target } = e;\r\n  return target.type === 'checkbox' ? target.checked : target.value;\r\n}\r\n\r\n/**\r\n * 根据用户输入的表单配置，生成一个初始的表单状态。\r\n * @param options\r\n */\r\nfunction createInitialState(options: Options) {\r\n  const initialState: FormState = {};\r\n\r\n  Object.entries(options).forEach(function([key, { initialValue = '' }]) {\r\n    initialState[key] = {\r\n      value: initialValue,\r\n      error: '',\r\n      validateStatus: 'none',\r\n    };\r\n  });\r\n  return initialState;\r\n}\r\n\r\n/**\r\n * 转换用户输入的配置为类型更严格的对象\r\n * 对于未配置的选项，提供一个默认值\r\n * @param options\r\n */\r\nfunction createStrictOptions(options: Options) {\r\n  const strictOptions: StrictOptions = {};\r\n\r\n  Object.entries(options).forEach(function([\r\n    key,\r\n    {\r\n      validator = () => {},\r\n      validateTriggers = ['onChange'],\r\n      getValueFromEvent = defaultGetValueFromEvent,\r\n      collectValueTrigger = 'onChange',\r\n    },\r\n  ]) {\r\n    strictOptions[key] = {\r\n      getValueFromEvent,\r\n      collectValueTrigger,\r\n      validator,\r\n      // 如果是字符串，则转为数组\r\n      validateTriggers:\r\n        typeof validateTriggers === 'string'\r\n          ? [validateTriggers]\r\n          : validateTriggers,\r\n    };\r\n  });\r\n  return strictOptions;\r\n}\r\n\r\nfunction useFormState(options: Options = {}) {\r\n  const initialState = useMemo(() => createInitialState(options), [options]);\r\n  const strictOptions = useMemo(() => createStrictOptions(options), [options]);\r\n\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return {\r\n    formState: state,\r\n    strictOptions,\r\n    dispatch,\r\n  };\r\n}\r\n\r\nexport default useFormState;\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Subject, Observable, from } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nimport { Handlers, Options, ValidateStatus } from './types';\r\nimport useFormState from './useFormState';\r\n\r\nfunction useForm(options: Options = {}) {\r\n  const { formState, strictOptions, dispatch } = useFormState(options);\r\n\r\n  /**\r\n   * 遍历用户输入的配置，获取所有的 ID\r\n   */\r\n  const _allIds: string[] = useMemo(() => Object.keys(options), [options]);\r\n\r\n  /**\r\n   * 把用户传入的 ids 转换成数组\r\n   * @param ids 用户输入的 id，可以是字符串或字符串数组。如果不填写，则默认返回表单状态中所有的 ID\r\n   */\r\n  const _toList = useCallback(\r\n    function toList(ids?: string | string[]): string[] {\r\n      // 如果只是一个字符串，则转成数组\r\n      if (typeof ids === 'string') {\r\n        return [ids];\r\n      }\r\n      // 如果没有给任何值，则默认获取所有的 ID\r\n      if (typeof ids === 'undefined') {\r\n        return _allIds;\r\n      }\r\n      return ids;\r\n    },\r\n    [_allIds],\r\n  );\r\n\r\n  /**\r\n   * 设置一个表单域的值\r\n   * @param id\r\n   * @param value\r\n   */\r\n  const setFeildValue = useCallback(\r\n    function setFeildValue(id: string, value: any): void {\r\n      dispatch({ type: 'SET_VALUE', id, value });\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  /**\r\n   * 设置一个表单域的错误信息\r\n   * @param id\r\n   * @param error\r\n   */\r\n  const setFeildError = useCallback(\r\n    function setFeildError(id: string, error?: string | void): void {\r\n      dispatch({ type: 'SET_ERROR', id, error: error ? error : '' });\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  /**\r\n   * 设置表单域的校验状态\r\n   * @param id\r\n   * @param status\r\n   */\r\n  const setFeildValidateStatus = useCallback(\r\n    function setFeildValidateStatus(id: string, status: ValidateStatus) {\r\n      dispatch({\r\n        type: 'SET_VALIDATE_STATUS',\r\n        id,\r\n        validateStatus: status,\r\n      });\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  /**\r\n   * 校验给定的值\r\n   * @param id 表单域的 ID\r\n   * @param eventSubject 用来获取被校验的值\r\n   */\r\n  const _subscribeToValidate = useCallback(\r\n    function subscribeToValidate(id: string, eventSubject: Observable<any>) {\r\n      eventSubject\r\n        .pipe(\r\n          switchMap(value => {\r\n            const { validator } = strictOptions[id];\r\n            // 设置校验状态为校验中\r\n            setFeildValidateStatus(id, 'validating');\r\n            // 先暂时重置表单的错误信息\r\n            setFeildError(id, '');\r\n\r\n            return from(Promise.resolve(validator(value)));\r\n          }),\r\n        )\r\n        .subscribe(validateResult => {\r\n          // 保存校验结果\r\n          setFeildError(id, validateResult ? validateResult : '');\r\n          // 根据校验结果设置校验状态\r\n          setFeildValidateStatus(id, validateResult ? 'error' : 'success');\r\n        });\r\n    },\r\n    [setFeildError, setFeildValidateStatus, strictOptions],\r\n  );\r\n\r\n  /**\r\n   * 创建指定表单域的事件处理函数\r\n   * @param id\r\n   */\r\n  const _createHandlers = useCallback(\r\n    function createHandlers(id: string): Handlers {\r\n      const {\r\n        collectValueTrigger,\r\n        getValueFromEvent,\r\n        validateTriggers,\r\n      } = strictOptions[id];\r\n      const handlers: Handlers = {};\r\n\r\n      // 遍历 [validateTriggers]，根据其事件名称，分别生成一个校验函数\r\n      validateTriggers.forEach(item => {\r\n        if (item && item !== collectValueTrigger) {\r\n          const validateTriggerSubject = new Subject<any>();\r\n          handlers[item] = e => {\r\n            const value = getValueFromEvent(e);\r\n            validateTriggerSubject.next(value);\r\n          };\r\n          // 注册校验\r\n          _subscribeToValidate(id, validateTriggerSubject);\r\n        }\r\n      });\r\n\r\n      const collectValueTriggerSubject = new Subject<any>();\r\n      if (validateTriggers.includes(collectValueTrigger)) {\r\n        // 如果 [validateTriggers] 中包含 [collectValueTrigger]\r\n        // 则在该事件中也要校验用户输入的值\r\n        handlers[collectValueTrigger] = e => {\r\n          const value = getValueFromEvent(e);\r\n          setFeildValue(id, value);\r\n          collectValueTriggerSubject.next(value);\r\n        };\r\n        // 注册校验\r\n        _subscribeToValidate(id, collectValueTriggerSubject);\r\n      } else {\r\n        // 如果不需要在该事件中校验用户输入的值，取消订阅相关事件\r\n        collectValueTriggerSubject.unsubscribe();\r\n\r\n        handlers[collectValueTrigger] = e => {\r\n          const value = getValueFromEvent(e);\r\n          setFeildValue(id, value);\r\n        };\r\n      }\r\n\r\n      return handlers;\r\n    },\r\n    [setFeildValue, strictOptions, _subscribeToValidate],\r\n  );\r\n\r\n  /**\r\n   * 获取一个表单域的值\r\n   * @param id\r\n   */\r\n  const getFeildValue = useCallback(\r\n    function getFeildValue(id: string): any {\r\n      const { value } = formState[id];\r\n      return value;\r\n    },\r\n    [formState],\r\n  );\r\n\r\n  /**\r\n   * 获取指定表单域的值\r\n   * 如果不传入任何参数，则获取所有表单域的值\r\n   * 返回值格式如下：\r\n   * ```javascript\r\n   * {\r\n   *   mobile: '1234567890',\r\n   *   password: '987654321',\r\n   *   imageList: ['img1','img2','img3'],\r\n   * }\r\n   * ```\r\n   * @param ids\r\n   */\r\n  const getFeildsValue = useCallback(\r\n    function getFeildsValue(ids?: string | string[]): { [id: string]: any } {\r\n      const idList = _toList(ids);\r\n      const values: { [id: string]: any } = {};\r\n\r\n      idList.forEach(id => {\r\n        values[id] = getFeildValue(id);\r\n      });\r\n\r\n      return values;\r\n    },\r\n    [getFeildValue, _toList],\r\n  );\r\n\r\n  /**\r\n   * 获取一个表单域的错误信息\r\n   * 如果有错误，返回错误提示文字\r\n   * 如果没有错误，返回空字符串\r\n   * @param id\r\n   */\r\n  const getFeildError = useCallback(\r\n    function getFeildError(id: string): string {\r\n      const { error } = formState[id];\r\n      return error;\r\n    },\r\n    [formState],\r\n  );\r\n\r\n  /**\r\n   * 获取指定表单域的错误信息\r\n   * 如果不传入任何参数，则获取所有表单域的错误信息\r\n   * 如果所有表单域校验都通过了，则返回 null\r\n   * 如果有错误，返回格式如下：\r\n   * ```javascript\r\n   * {\r\n   *   mobile: {\r\n   *     error: '请输入手机号'\r\n   *   },\r\n   *   password: {\r\n   *     error: '请输入密码'\r\n   *   }\r\n   * }\r\n   * ```\r\n   * @param ids\r\n   */\r\n  const getFeildsError = useCallback(\r\n    function getFeildsError(ids?: string | string[]) {\r\n      const idList = _toList(ids);\r\n\r\n      const errors: { [id: string]: { error: string } } = {};\r\n      let noErrors = true;\r\n\r\n      idList.forEach(id => {\r\n        const error = getFeildError(id);\r\n        if (error) {\r\n          noErrors = false;\r\n        }\r\n        errors[id] = { error };\r\n      });\r\n\r\n      return noErrors ? null : errors;\r\n    },\r\n    [getFeildError, _toList],\r\n  );\r\n\r\n  /**\r\n   * 获取一个表单域的属性\r\n   * 包括该表单域的值和相应的事件处理器\r\n   * 调用该函数后的返回值，可以使用扩展运算符全部传给相应的表单组件\r\n   * @param id\r\n   */\r\n  const useFeildProps = useCallback(\r\n    function useFeildProps(\r\n      id: string,\r\n    ): { value: any; [handler: string]: Handlers } {\r\n      const handlers = useMemo(() => _createHandlers(id), [id]);\r\n\r\n      return { value: getFeildValue(id), ...handlers };\r\n    },\r\n    [_createHandlers, getFeildValue],\r\n  );\r\n\r\n  /**\r\n   * 获取表单域的校验状态\r\n   * @param id\r\n   */\r\n  const getFeildValidateStatus = useCallback(\r\n    function getFeildValidateStatus(id: string): ValidateStatus {\r\n      const { validateStatus } = formState[id];\r\n      return validateStatus;\r\n    },\r\n    [formState],\r\n  );\r\n\r\n  /**\r\n   * 校验一个指定表单域\r\n   * 校验通过，返回 true；否则，返回 false\r\n   * @param id\r\n   */\r\n  const _validateFeild = useCallback(\r\n    async function validateFeild(id: string): Promise<boolean> {\r\n      const { value, error, validateStatus } = formState[id];\r\n      const { validator } = strictOptions[id];\r\n\r\n      if (validateStatus !== 'none' && error) {\r\n        return false;\r\n      } else {\r\n        // 设置校验状态为校验中\r\n        setFeildValidateStatus(id, 'validating');\r\n        // 先暂时重置表单的错误信息\r\n        setFeildError(id, '');\r\n\r\n        const error = await validator(value);\r\n\r\n        // 保存校验结果\r\n        setFeildError(id, error);\r\n        // 根据校验结果设置校验状态\r\n        setFeildValidateStatus(id, error ? 'error' : 'success');\r\n\r\n        return error ? false : true;\r\n      }\r\n    },\r\n    [formState, strictOptions, setFeildValidateStatus, setFeildError],\r\n  );\r\n\r\n  /**\r\n   * 校验表单域\r\n   * 如果不传入任何参数，则校验所有表单域\r\n   * 表单域中只要有一个校验未通过，就返回 false\r\n   * 如果所有都校验成功，就返回 true\r\n   * @param ids\r\n   */\r\n  const validateFeilds = useCallback(\r\n    async function validateFeilds(ids?: string | string[]): Promise<boolean> {\r\n      const idList = _toList(ids);\r\n      const resultList = await Promise.all(\r\n        idList.map(id => _validateFeild(id)),\r\n      );\r\n      return resultList.some(passed => !passed) ? false : true;\r\n    },\r\n    [_toList, _validateFeild],\r\n  );\r\n\r\n  return {\r\n    setFeildValue,\r\n    setFeildError,\r\n    useFeildProps,\r\n    getFeildValue,\r\n    getFeildsValue,\r\n    getFeildError,\r\n    getFeildsError,\r\n    getFeildValidateStatus,\r\n    validateFeilds,\r\n  };\r\n}\r\n\r\nexport default useForm;\r\n","import useForm from './useForm';\r\n\r\nexport * from './types';\r\nexport { useForm };\r\n","import React, { MouseEvent, useMemo } from 'react';\r\nimport {\r\n  TextField,\r\n  Button,\r\n  CircularProgress,\r\n  makeStyles,\r\n  Paper,\r\n} from '@material-ui/core';\r\nimport { useForm, Options } from './useForm';\r\n\r\nconst mobileRegExp = /^(13[0-9]|14[579]|15[0-3,5-9]|16[6]|17[0135678]|18[0-9]|19[89])\\d{8}$/;\r\n\r\n/**\r\n * 延迟返回结果以模拟网络请求\r\n * @param time 延迟时间\r\n * @param data 延迟返回的值\r\n */\r\nfunction delay(time: number, data?: string): Promise<string> {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(data);\r\n    }, time);\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  background: {\r\n    height: '100vh',\r\n    width: '100wh',\r\n    background: 'linear-gradient(to right, #232526, #414345)',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n\r\n  paper: {\r\n    minWidth: 500,\r\n    padding: 50,\r\n  },\r\n\r\n  form: {\r\n    display: 'grid',\r\n    gap: '30px',\r\n  },\r\n\r\n  validatingWrap: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    '& > span': {\r\n      marginRight: 4,\r\n    },\r\n  },\r\n});\r\n\r\nfunction Validating() {\r\n  const { validatingWrap } = useStyles();\r\n\r\n  return (\r\n    <div className={validatingWrap}>\r\n      <span>校验中</span>\r\n      <CircularProgress size={12} />\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface FormProps {\r\n  mobile: string;\r\n}\r\n\r\nfunction Form({ mobile }: FormProps) {\r\n  const options = useMemo<Options>(\r\n    () => ({\r\n      mobile: {\r\n        initialValue: mobile,\r\n        validator: async (value: string) => {\r\n          if (!value) {\r\n            return '请输入手机号';\r\n          }\r\n\r\n          await delay((Math.random() + 1) * 2000);\r\n          if (!mobileRegExp.test(value)) {\r\n            return '手机号格式不正确';\r\n          }\r\n        },\r\n        validateTriggers: ['onBlur', 'onChange'],\r\n      },\r\n\r\n      password: {\r\n        validator: value => {\r\n          if (!value) {\r\n            return '请输入密码';\r\n          }\r\n        },\r\n        validateTriggers: 'onChange',\r\n      },\r\n    }),\r\n    [mobile],\r\n  );\r\n\r\n  const {\r\n    useFeildProps,\r\n    getFeildValidateStatus,\r\n    getFeildError,\r\n    validateFeilds,\r\n    getFeildsValue,\r\n  } = useForm(options);\r\n\r\n  async function handleSubmit(e: MouseEvent<HTMLButtonElement>) {\r\n    e.preventDefault();\r\n\r\n    const isFormValide = await validateFeilds();\r\n    console.log(`表单校验是否通过：${isFormValide}`);\r\n\r\n    if (isFormValide) {\r\n      const values = getFeildsValue();\r\n      console.log('表单值：', values);\r\n    }\r\n  }\r\n\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <div className={styles.background}>\r\n      <Paper className={styles.paper}>\r\n        <form className={styles.form}>\r\n          <TextField\r\n            label=\"mobile\"\r\n            {...useFeildProps('mobile')}\r\n            error={!!getFeildError('mobile')}\r\n            FormHelperTextProps={{ component: 'div' }}\r\n            helperText={\r\n              getFeildValidateStatus('mobile') === 'validating' ? (\r\n                <Validating />\r\n              ) : (\r\n                getFeildError('mobile')\r\n              )\r\n            }\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n\r\n          <TextField\r\n            label=\"password\"\r\n            {...useFeildProps('password')}\r\n            error={!!getFeildError('password')}\r\n            helperText={getFeildError('password')}\r\n            variant=\"outlined\"\r\n            fullWidth\r\n          />\r\n\r\n          <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n            submit\r\n          </Button>\r\n        </form>\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\nimport Form from './Form';\nimport { CssBaseline, createMuiTheme } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({});\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Form mobile=\"123456\" />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}